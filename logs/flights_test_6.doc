Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
19/05/31 23:07:09 INFO SparkContext: Running Spark version 2.4.2
19/05/31 23:07:09 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
19/05/31 23:07:09 INFO SparkContext: Submitted application: FlightAnalyser
19/05/31 23:07:09 INFO SecurityManager: Changing view acls to: rubenandrebarreiro
19/05/31 23:07:09 INFO SecurityManager: Changing modify acls to: rubenandrebarreiro
19/05/31 23:07:09 INFO SecurityManager: Changing view acls groups to: 
19/05/31 23:07:09 INFO SecurityManager: Changing modify acls groups to: 
19/05/31 23:07:09 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(rubenandrebarreiro); groups with view permissions: Set(); users  with modify permissions: Set(rubenandrebarreiro); groups with modify permissions: Set()
19/05/31 23:07:11 INFO Utils: Successfully started service 'sparkDriver' on port 59433.
19/05/31 23:07:11 INFO SparkEnv: Registering MapOutputTracker
19/05/31 23:07:11 INFO SparkEnv: Registering BlockManagerMaster
19/05/31 23:07:11 INFO BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
19/05/31 23:07:11 INFO BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
19/05/31 23:07:11 INFO DiskBlockManager: Created local directory at C:\Users\rubenandrebarreiro\AppData\Local\Temp\blockmgr-6399d8df-a602-48a1-8a7e-081b21ef0591
19/05/31 23:07:11 INFO MemoryStore: MemoryStore started with capacity 19.1 GB
19/05/31 23:07:11 INFO SparkEnv: Registering OutputCommitCoordinator
19/05/31 23:07:11 INFO Utils: Successfully started service 'SparkUI' on port 4040.
19/05/31 23:07:11 INFO SparkUI: Bound SparkUI to 0.0.0.0, and started at http://RUBEN-LAPTOP:4040
19/05/31 23:07:11 INFO Executor: Starting executor ID driver on host localhost
19/05/31 23:07:11 INFO Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 59474.
19/05/31 23:07:11 INFO NettyBlockTransferService: Server created on RUBEN-LAPTOP:59474
19/05/31 23:07:11 INFO BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
19/05/31 23:07:11 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, RUBEN-LAPTOP, 59474, None)
19/05/31 23:07:11 INFO BlockManagerMasterEndpoint: Registering block manager RUBEN-LAPTOP:59474 with 19.1 GB RAM, BlockManagerId(driver, RUBEN-LAPTOP, 59474, None)
19/05/31 23:07:11 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, RUBEN-LAPTOP, 59474, None)
19/05/31 23:07:11 INFO BlockManager: Initialized BlockManager: BlockManagerId(driver, RUBEN-LAPTOP, 59474, None)

The number of Airports that will be processed by the Algorithm: 6


The Reduce Factor to apply to all the Routes going out from the Bottleneck Airport will be: 0.42913216



Starting the computing of the Minimum Spanning Tree - M.S.T. (Prim's Algorithm)...

The initial vertex to compute the Minimum Spanning Tree (M.S.T.) is: 5

Already visited 1 Airports!

The Vertex Index with minimum distance is: 1
Next Last Vertex to be visited: 1
Last Vertex visited: 5



Already visited 2 Airports!

The Vertex Index with minimum distance is: 2
Next Last Vertex to be visited: 2
Last Vertex visited: 1



Already visited 3 Airports!

The Vertex Index with minimum distance is: 4
Next Last Vertex to be visited: 4
Last Vertex visited: 2



Already visited 4 Airports!

The Vertex Index with minimum distance is: 3
Next Last Vertex to be visited: 3
Last Vertex visited: 4



Already visited 5 Airports!

The Vertex Index with minimum distance is: 6
Next Last Vertex to be visited: 6
Last Vertex visited: 3




The content of the Minimum Spanning Tree (Prim's Algorithm) is:
- (5,1) = 5.0
- (4,6) = 316.0
- (1,3) = 19.0
- (5,5) = 0.0
- (2,4) = 16.0
- (1,2) = 9.0


The Bottleneck Airport with the highest aggregated/sum of Average Departure Delay is:
- 5 => 915.0



The initial vertex to compute the Minimum Spanning Tree (M.S.T.) is: 5

Already visited 1 Airports!

The Vertex Index with minimum distance is: 1
Next Last Vertex to be visited: 1
Last Vertex visited: 5



Already visited 2 Airports!

The Vertex Index with minimum distance is: 2
Next Last Vertex to be visited: 2
Last Vertex visited: 1



Already visited 3 Airports!

The Vertex Index with minimum distance is: 4
Next Last Vertex to be visited: 4
Last Vertex visited: 2



Already visited 4 Airports!

The Vertex Index with minimum distance is: 3
Next Last Vertex to be visited: 3
Last Vertex visited: 4



Already visited 5 Airports!

The Vertex Index with minimum distance is: 6
Next Last Vertex to be visited: 6
Last Vertex visited: 3




The content of the Minimum Spanning Tree (Prim's Algorithm) with Bottleneck Airport Reduced by Factor is:
(5,1) = 2.1456608176231384
(4,6) = 313.14566081762314
(1,3) = 16.14566081762314
(5,5) = 0.0
(2,4) = 13.145660817623138
(1,2) = 6.145660817623138


It took 00h:01m:14s to process and execute the whole Algorithm with a Dataset with 6 Airports!


Terminating Spark's Session...
Java HotSpot(TM) 64-Bit Server VM warning: MaxNewSize (16777216k) is equal to or greater than the entire heap (16777216k).  A new max generation size of 16776704k will be used.
